version: '3.8'

services:
  # MongoDB with security hardening
  mongodb:
    image: mongo:7.0
    container_name: library-tracker-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: library-tracker
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro
      - ./mongod.conf:/etc/mongod.conf:ro
    command: mongod --config /etc/mongod.conf
    networks:
      - library-tracker-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
      - /var/lock

  # Backend API with security measures
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    container_name: library-tracker-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_APP_USERNAME}:${MONGO_APP_PASSWORD}@mongodb:27017/library-tracker?authSource=library-tracker
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRE: 15m
      JWT_REFRESH_EXPIRE: 7d
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      SECRETS_ENCRYPTION_KEY: ${SECRETS_ENCRYPTION_KEY}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      CORS_ORIGIN: ${CORS_ORIGIN}
      ENABLE_RATE_LIMITING: true
      ENABLE_SECURITY_LOGGING: true
      LOG_LEVEL: warn
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      - mongodb
    networks:
      - library-tracker-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/uploads/temp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy with security hardening
  nginx:
    image: nginx:1.25-alpine
    container_name: library-tracker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - ../frontend/dist:/var/www/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - library-tracker-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Security monitoring with Fail2ban
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: library-tracker-fail2ban
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - fail2ban_data:/data
      - nginx_logs:/var/log/nginx:ro
      - backend_logs:/var/log/library-tracker:ro
      - ./fail2ban:/etc/fail2ban:ro
    environment:
      TZ: UTC
      F2B_LOG_LEVEL: INFO
      F2B_DB_PURGE_AGE: 1d
    security_opt:
      - no-new-privileges:true

  # Log aggregation and monitoring
  promtail:
    image: grafana/promtail:latest
    container_name: library-tracker-promtail
    restart: unless-stopped
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
      - nginx_logs:/var/log/nginx:ro
      - backend_logs:/var/log/library-tracker:ro
    networks:
      - library-tracker-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Backup service
  backup:
    image: alpine:latest
    container_name: library-tracker-backup
    restart: "no"
    volumes:
      - mongodb_data:/data/mongodb:ro
      - backend_uploads:/data/uploads:ro
      - ./backup-script.sh:/backup.sh:ro
    environment:
      BACKUP_RETENTION_DAYS: 30
      S3_BUCKET: ${BACKUP_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    command: /backup.sh
    security_opt:
      - no-new-privileges:true

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/library-tracker/mongodb
  backend_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/library-tracker/uploads
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/library-tracker
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/nginx
  fail2ban_data:
    driver: local

networks:
  library-tracker-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
